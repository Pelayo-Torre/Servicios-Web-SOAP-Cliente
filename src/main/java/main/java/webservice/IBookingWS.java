
package main.java.webservice;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.0
 * Generated source version: 2.2
 * 
 */
@WebService(name = "IBookingWS", targetNamespace = "http://services.web/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface IBookingWS {


    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ParseException_Exception
     * @throws BookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteBooking", targetNamespace = "http://services.web/", className = "main.java.webservice.DeleteBooking")
    @ResponseWrapper(localName = "deleteBookingResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.DeleteBookingResponse")
    @Action(input = "http://services.web/IBookingWS/deleteBookingRequest", output = "http://services.web/IBookingWS/deleteBookingResponse", fault = {
        @FaultAction(className = BookingException_Exception.class, value = "http://services.web/IBookingWS/deleteBooking/Fault/BookingException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://services.web/IBookingWS/deleteBooking/Fault/ParseException")
    })
    public String deleteBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0)
        throws BookingException_Exception, ParseException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ParseException_Exception
     * @throws ClientException_Exception
     * @throws BookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addBooking", targetNamespace = "http://services.web/", className = "main.java.webservice.AddBooking")
    @ResponseWrapper(localName = "addBookingResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.AddBookingResponse")
    @Action(input = "http://services.web/IBookingWS/addBookingRequest", output = "http://services.web/IBookingWS/addBookingResponse", fault = {
        @FaultAction(className = BookingException_Exception.class, value = "http://services.web/IBookingWS/addBooking/Fault/BookingException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://services.web/IBookingWS/addBooking/Fault/ParseException"),
        @FaultAction(className = ClientException_Exception.class, value = "http://services.web/IBookingWS/addBooking/Fault/ClientException")
    })
    public String addBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        BookingAddDTO arg0)
        throws BookingException_Exception, ClientException_Exception, ParseException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ParseException_Exception
     * @throws BookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateBooking", targetNamespace = "http://services.web/", className = "main.java.webservice.UpdateBooking")
    @ResponseWrapper(localName = "updateBookingResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.UpdateBookingResponse")
    @Action(input = "http://services.web/IBookingWS/updateBookingRequest", output = "http://services.web/IBookingWS/updateBookingResponse", fault = {
        @FaultAction(className = BookingException_Exception.class, value = "http://services.web/IBookingWS/updateBooking/Fault/BookingException"),
        @FaultAction(className = ParseException_Exception.class, value = "http://services.web/IBookingWS/updateBooking/Fault/ParseException")
    })
    public String updateBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        BookingDTO arg0)
        throws BookingException_Exception, ParseException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns main.java.webservice.BookingDTO
     * @throws BookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listBooking", targetNamespace = "http://services.web/", className = "main.java.webservice.ListBooking")
    @ResponseWrapper(localName = "listBookingResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.ListBookingResponse")
    @Action(input = "http://services.web/IBookingWS/listBookingRequest", output = "http://services.web/IBookingWS/listBookingResponse", fault = {
        @FaultAction(className = BookingException_Exception.class, value = "http://services.web/IBookingWS/listBooking/Fault/BookingException")
    })
    public BookingDTO listBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0)
        throws BookingException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ServiceException_Exception
     * @throws BookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addServicesToBooking", targetNamespace = "http://services.web/", className = "main.java.webservice.AddServicesToBooking")
    @ResponseWrapper(localName = "addServicesToBookingResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.AddServicesToBookingResponse")
    @Action(input = "http://services.web/IBookingWS/addServicesToBookingRequest", output = "http://services.web/IBookingWS/addServicesToBookingResponse", fault = {
        @FaultAction(className = ServiceException_Exception.class, value = "http://services.web/IBookingWS/addServicesToBooking/Fault/ServiceException"),
        @FaultAction(className = BookingException_Exception.class, value = "http://services.web/IBookingWS/addServicesToBooking/Fault/BookingException")
    })
    public String addServicesToBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<ServiceDTO> arg1)
        throws BookingException_Exception, ServiceException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<main.java.webservice.BookingDTO>
     * @throws ClientException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listBookingsOfClient", targetNamespace = "http://services.web/", className = "main.java.webservice.ListBookingsOfClient")
    @ResponseWrapper(localName = "listBookingsOfClientResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.ListBookingsOfClientResponse")
    @Action(input = "http://services.web/IBookingWS/listBookingsOfClientRequest", output = "http://services.web/IBookingWS/listBookingsOfClientResponse", fault = {
        @FaultAction(className = ClientException_Exception.class, value = "http://services.web/IBookingWS/listBookingsOfClient/Fault/ClientException")
    })
    public List<BookingDTO> listBookingsOfClient(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0)
        throws ClientException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws RoomException_Exception
     * @throws BookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addRoomsToBooking", targetNamespace = "http://services.web/", className = "main.java.webservice.AddRoomsToBooking")
    @ResponseWrapper(localName = "addRoomsToBookingResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.AddRoomsToBookingResponse")
    @Action(input = "http://services.web/IBookingWS/addRoomsToBookingRequest", output = "http://services.web/IBookingWS/addRoomsToBookingResponse", fault = {
        @FaultAction(className = RoomException_Exception.class, value = "http://services.web/IBookingWS/addRoomsToBooking/Fault/RoomException"),
        @FaultAction(className = BookingException_Exception.class, value = "http://services.web/IBookingWS/addRoomsToBooking/Fault/BookingException")
    })
    public String addRoomsToBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<RoomDTO> arg1)
        throws BookingException_Exception, RoomException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws RoomException_Exception
     * @throws BookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "removeRoomsToBooking", targetNamespace = "http://services.web/", className = "main.java.webservice.RemoveRoomsToBooking")
    @ResponseWrapper(localName = "removeRoomsToBookingResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.RemoveRoomsToBookingResponse")
    @Action(input = "http://services.web/IBookingWS/removeRoomsToBookingRequest", output = "http://services.web/IBookingWS/removeRoomsToBookingResponse", fault = {
        @FaultAction(className = RoomException_Exception.class, value = "http://services.web/IBookingWS/removeRoomsToBooking/Fault/RoomException"),
        @FaultAction(className = BookingException_Exception.class, value = "http://services.web/IBookingWS/removeRoomsToBooking/Fault/BookingException")
    })
    public String removeRoomsToBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<RoomDTO> arg1)
        throws BookingException_Exception, RoomException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ServiceException_Exception
     * @throws BookingException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "removeServicesToBooking", targetNamespace = "http://services.web/", className = "main.java.webservice.RemoveServicesToBooking")
    @ResponseWrapper(localName = "removeServicesToBookingResponse", targetNamespace = "http://services.web/", className = "main.java.webservice.RemoveServicesToBookingResponse")
    @Action(input = "http://services.web/IBookingWS/removeServicesToBookingRequest", output = "http://services.web/IBookingWS/removeServicesToBookingResponse", fault = {
        @FaultAction(className = ServiceException_Exception.class, value = "http://services.web/IBookingWS/removeServicesToBooking/Fault/ServiceException"),
        @FaultAction(className = BookingException_Exception.class, value = "http://services.web/IBookingWS/removeServicesToBooking/Fault/BookingException")
    })
    public String removeServicesToBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<ServiceDTO> arg1)
        throws BookingException_Exception, ServiceException_Exception
    ;

}
